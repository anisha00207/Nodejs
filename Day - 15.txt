Introduction to Angular from scratch :

Angular is a TypeScript-based front-end framework developed and maintained by Google. It is widely used for building dynamic, single-page web applications (SPAs) with a modular and scalable architecture.

1. Why Angular? :

Component-Based Architecture – Develop reusable UI components.

Two-Way Data Binding – Synchronizes data between UI and business logic.

Dependency Injection (DI) – Manages services and enhances modularity.

Directives & Pipes – Extend HTML capabilities.

Routing & Navigation – Create SPAs with dynamic page transitions.

Built-in HTTP Client – For API communication.

Reactive Forms & Template-Driven Forms – Handle form validation and user input.

Support for RxJS – Enables reactive programming.

2. Setting Up Angular

Prerequisites

Install Node.js (includes npm)

Install Angular CLI (Command Line Interface)

npm install -g @angular/cli

Creating a New Angular Project

ng new my-angular-app
cd my-angular-app
ng serve

The application runs at http://localhost:4200/

3. Angular Project Structure

my-angular-app/
│── src/
│   ├── app/
│   │   ├── components/
│   │   ├── services/
│   │   ├── app.module.ts
│   │   ├── app.component.ts
│   │   ├── app.component.html
│   ├── assets/
│   ├── environments/
│── angular.json
│── package.json
│── tsconfig.json
app.component.ts – Root component logic
app.module.ts – Defines modules and dependencies
angular.json – Project configuration file
package.json – Dependencies and scripts
tsconfig.json – TypeScript configuration

4. Angular Core Concepts

4.1 Components

Components are the building blocks of an Angular application.

Creating a Component

ng generate component my-component

Component Structure :

import { Component } from '@angular/core';

@Component({
  selector: 'app-my-component',
  templateUrl: './my-component.component.html',
  styleUrls: ['./my-component.component.css']
})
export class MyComponent {
  message: string = "Hello, Angular!";
}

Using the Component

<app-my-component></app-my-component>

4.2 Data Binding

Interpolation (One-Way Binding)

<p>{{ message }}</p>

Property Binding :

<input [value]="message">

Event Binding :

<button (click)="sayHello()">Click Me</button>

sayHello() {
  alert("Hello, Angular!");
}

Two-Way Binding :

<input [(ngModel)]="message">

Enable FormsModule in app.module.ts:

import { FormsModule } from '@angular/forms';
@NgModule({
  imports: [FormsModule]
})

4.3 Directives :

Directives help to manipulate the DOM dynamically.

Structural Directives :

*ngIf – Conditionally renders elements

<p *ngIf="isVisible">This is visible</p>

*ngFor – Loops through an array

<ul>
  <li *ngFor="let item of items">{{ item }}</li>
</ul>

Attribute Directives :

ngClass – Adds dynamic CSS classes

<p [ngClass]="{ 'red': isError }">Styled Text</p>

4.4 Services & Dependency Injection :

Services allow sharing data and logic between components.

Generating a Service

ng generate service my-service

Creating a Service

import { Injectable } from '@angular/core';

@Injectable({
  providedIn: 'root'
})
export class MyService {
  getData() {
    return "Hello from Service!";
  }
}

Injecting Service into Component :

import { MyService } from '../my-service.service';

constructor(private myService: MyService) {}

ngOnInit() {
  this.message = this.myService.getData();
}

4.5 Routing in Angular

Routing enables navigation between different views.

Step 1: Enable Routing in app.module.ts

import { RouterModule, Routes } from '@angular/router';
import { HomeComponent } from './home/home.component';
import { AboutComponent } from './about/about.component';

const routes: Routes = [
  { path: 'home', component: HomeComponent },
  { path: 'about', component: AboutComponent },
  { path: '', redirectTo: '/home', pathMatch: 'full' }
];

@NgModule({
  imports: [RouterModule.forRoot(routes)],
  exports: [RouterModule]
})

export class AppRoutingModule {}


Step 2: Add <router-outlet> in app.component.html

<nav>
  <a routerLink="/home">Home</a>
  <a routerLink="/about">About</a>
</nav>
<router-outlet></router-outlet>

4.6 HTTP Client in Angular

Fetch API data using Angular’s built-in HttpClient.

Step 1: Enable HttpClientModule in app.module.ts

import { HttpClient } from '@angular/common/http';
@NgModule({
  imports: [HttpClientModule]
})

Step 2: Create a Service to Fetch Data

import { HttpClient } from '@angular/common/http';

constructor(private http: HttpClient) {}

getUsers() {
  return this.http.get('https://jsonplaceholder.typicode.com/users');
}

Step 3: Use the Service in a Component

ngOnInit() {
  this.myService.getUsers().subscribe(data => {
    this.users = data;
  });
}


Single Page Applications (SPA) from scratch :

What is a Single Page Application (SPA)?

A Single Page Application (SPA) is a web application that dynamically updates content without requiring a full page reload. Unlike traditional multi-page applications (MPAs), SPAs load a single HTML page and use JavaScript to update the content dynamically based on user interactions.

How SPAs Work

When a user visits an SPA, the server loads a single HTML page, along with CSS and JavaScript.
The JavaScript framework (React, Angular, Vue.js, etc.) manages routing and dynamically updates the content.
Instead of reloading the page, AJAX or Fetch API is used to get data from the server.
The application modifies the DOM (Document Object Model) dynamically, creating a smooth and fast user experience.

Benefits of SPAs

Faster Performance: Since only necessary content is updated, it reduces server load and improves responsiveness.
Better User Experience: Smooth transitions and no page refresh provide a native app-like feel.
Reduced Server Load: Backend servers deliver only data (JSON or XML), minimizing bandwidth usage.
Easier Debugging: Modern frameworks provide powerful developer tools for debugging.
Reusability: Frontend code can be reused across web and mobile applications using frameworks like React Native.

Comparison: SPA vs. MPA

Feature	SPA	MPA
Page Reload	No full reload	Full page reload
Speed	Faster after the initial load	Slower due to frequent requests
SEO	Challenging but possible with SSR	Easier for SEO
User Experience	Smooth transitions	Traditional navigation
Backend Load	Lower (only data requests)	Higher (renders full pages)

Technologies Used in SPAs

Frontend Frameworks/Libraries: React.js, Angular, Vue.js, Svelte.
Backend APIs: Node.js, Express, Django, Flask, ASP.NET.
Data Fetching: AJAX, Fetch API, GraphQL, Axios.
Routing: React Router, Angular Router, Vue Router.
State Management: Redux, MobX, Vuex, NgRx.

How to Build a Simple SPA

1. Setup an HTML Structure

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Simple SPA</title>
</head>
<body>
    <nav>
        <a href="#" onclick="navigate('home')">Home</a>
        <a href="#" onclick="navigate('about')">About</a>
    </nav>
    <div id="content"></div>

    <script>
        function navigate(page) {
            const contentDiv = document.getElementById('content');
            if (page === 'home') {
                contentDiv.innerHTML = '<h1>Welcome to Home</h1>';
            } else if (page === 'about') {
                contentDiv.innerHTML = '<h1>About Us</h1>';
            }
        }
        navigate('home'); // Load the home page by default
    </script>
</body>
</html>

2. Using a Frontend Framework (React Example)

import React, { useState } from "react";

function App() {
    const [page, setPage] = useState("home");

    return (
        <div>
            <nav>
                <button onClick={() => setPage("home")}>Home</button>
                <button onClick={() => setPage("about")}>About</button>
            </nav>
            {page === "home" && <h1>Welcome to Home</h1>}
            {page === "about" && <h1>About Us</h1>}
        </div>
    );
}

export default App;

Challenges of SPAs

SEO Optimization: Since SPAs load content dynamically, search engines may not index them properly. Solutions include Server-Side Rendering (SSR) using Next.js or Nuxt.js.
Initial Load Time: SPAs can have a slow initial load time due to downloading JavaScript bundles.
Security Concerns: SPAs are more vulnerable to XSS (Cross-Site Scripting), requiring strict security measures.


Angular CLI from scratch :


What is Angular CLI?

Angular CLI (Command Line Interface) is a powerful tool provided by the Angular team to streamline the development of Angular applications. It helps developers create, build, test, and deploy Angular projects efficiently by automating repetitive tasks.

Why Use Angular CLI?

Fast Setup: Quickly scaffolds Angular projects.
Consistent Code Structure: Ensures best practices and project consistency.
Automation: Generates components, services, modules, and more with simple commands.
Efficient Development: Provides built-in development server and live-reloading.
Testing Support: Integrated unit and end-to-end testing.

Installing Angular CLI

To install Angular CLI, you need Node.js and npm (Node Package Manager).

Step 1: Install Node.js
Download and install Node.js from Node.js Official Website.

To verify installation:

node -v
npm -v

Step 2: Install Angular CLI

Use the following command to install Angular CLI globally:

npm install -g @angular/cli

Verify Angular CLI installation:

ng version

Creating an Angular Project

Use Angular CLI to generate a new project:

ng new my-angular-app

The CLI will prompt for routing setup and CSS preprocessor options.

Navigate to the project directory:

cd my-angular-app

Start the development server:

ng serve

Open http://localhost:4200/ in your browser to see the running app.

Angular CLI Commands

1. Generate Components, Services, and More

Angular CLI can generate different parts of an application:

Component:

ng generate component my-component
or

ng g c my-component

Service:

ng generate service my-service

Module:

ng generate module my-module

2. Running the Application

ng serve

By default, runs on localhost:4200

Use --port to change port:

ng serve --port 4500

3. Building the Application

To create an optimized production build:

ng build --prod

The build output is stored in the dist/ folder.

4. Running Tests

Unit Tests:
ng test

End-to-End (E2E) Tests:

ng e2e

5. Adding Dependencies

Install third-party libraries using npm:

npm install bootstrap

Then, import it in angular.json:

"styles": [
  "node_modules/bootstrap/dist/css/bootstrap.min.css"
]

6. Updating Angular CLI

To update Angular CLI to the latest version:

ng update @angular/cli @angular/core


Angular Default directory structure from scratch :

When you create a new Angular project using the Angular CLI (ng new project-name), a default directory structure is generated. This structure is designed to keep the application modular, maintainable, and scalable. Below is a breakdown of the default Angular project structure:

1. Root Directory Structure

project-name/
│-- node_modules/
│-- src/
│   ├── app/
│   ├── assets/
│   ├── environments/
│   ├── favicon.ico
│   ├── index.html
│   ├── main.ts
│   ├── polyfills.ts
│   ├── styles.css
│   ├── test.ts
│   ├── tsconfig.app.json
│   ├── tsconfig.spec.json
│-- angular.json
│-- package.json
│-- tsconfig.json
│-- tslint.json

2. Explanation of Each Directory and File

1. node_modules/
This folder contains all the installed dependencies from package.json.
It is automatically created when you run npm install.
You should not manually modify this folder.

2. src/ (Source Code)
This is the main working directory where the application code resides.

a) app/ (Core Application Logic)
This folder contains the core components, modules, services, and routing configurations.
Example of files inside app/:

app/
├── app.component.ts       (Component logic)
├── app.component.html     (Component template)
├── app.component.css      (Component styling)
├── app.component.spec.ts  (Component test file)
├── app.module.ts          (Root module of the application)

b) assets/
Used to store static resources such as images, icons, and JSON files.
These assets are directly accessible in the application.

c) environments/
Contains configuration files for different environments:

environments/
├── environment.ts         (Development environment)
├── environment.prod.ts    (Production environment)
Used to store API URLs and environment-specific settings.

d) favicon.ico

The icon displayed in the browser tab for the application.

e) index.html
The main entry point of the Angular application.
It contains the <app-root></app-root> element, which serves as the placeholder for rendering the application.
f) main.ts
The starting point of the application where Angular bootstraps the AppModule.
g) polyfills.ts
Provides compatibility with older browsers.
h) styles.css
The global stylesheet for the application.
i) test.ts
The configuration file for running unit tests.
j) tsconfig.app.json
TypeScript configuration specific to the application.
k) tsconfig.spec.json
TypeScript configuration specific to unit testing.

3. Root-Level Configuration Files

1. angular.json
Angular workspace configuration file.
Defines settings for building, serving, and testing the application.

2. package.json

Contains project dependencies and scripts.
Lists all installed npm packages.

3. tsconfig.json
The global TypeScript configuration file.

4. tslint.json
Configuration for TypeScript linting (Deprecated in favor of ESLint).

4. How to Generate a New Angular Project?
Run the following command:

ng new my-angular-app

This command will create a default project with the above structure.


